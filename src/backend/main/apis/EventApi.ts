/* tslint:disable */
/* eslint-disable */
/**
 * va
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.16.dev115
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EventImageGetError,
    EventImageGetErrorFromJSON,
    EventImageGetErrorToJSON,
    EventImageGetResponse200,
    EventImageGetResponse200FromJSON,
    EventImageGetResponse200ToJSON,
    EventsGetError,
    EventsGetErrorFromJSON,
    EventsGetErrorToJSON,
    EventsGetResponse200,
    EventsGetResponse200FromJSON,
    EventsGetResponse200ToJSON,
    IncidentsGetError,
    IncidentsGetErrorFromJSON,
    IncidentsGetErrorToJSON,
    IncidentsGetResponse200,
    IncidentsGetResponse200FromJSON,
    IncidentsGetResponse200ToJSON,
    InoutEventsStatsGetResponse200,
    InoutEventsStatsGetResponse200FromJSON,
    InoutEventsStatsGetResponse200ToJSON,
    LatestEventsGetResponse200,
    LatestEventsGetResponse200FromJSON,
    LatestEventsGetResponse200ToJSON,
    TimelineEventsGetError,
    TimelineEventsGetErrorFromJSON,
    TimelineEventsGetErrorToJSON,
    TimelineEventsGetResponse200,
    TimelineEventsGetResponse200FromJSON,
    TimelineEventsGetResponse200ToJSON,
} from '../models';

export interface ApiVaCompaniesCompanyIdEventsEventCodeImageGetRequest {
    companyId: number;
    eventCode: string;
}

export interface ApiVaCompaniesCompanyIdEventsGetRequest {
    companyId: number;
    locationIds?: number;
    sensorIds?: number;
    tocIds?: number;
    tzOffset?: number;
    startTime?: string;
    endTime?: string;
}

export interface ApiVaCompaniesCompanyIdEventsIncidentsGetRequest {
    companyId: number;
    tzOffset?: number;
    startTime?: string;
    endTime?: string;
}

export interface ApiVaCompaniesCompanyIdEventsInoutStatsGetRequest {
    companyId: number;
    tzOffset?: number;
}

export interface ApiVaCompaniesCompanyIdEventsLatestGetRequest {
    companyId: number;
    tzOffset?: number;
}

export interface ApiVaCompaniesCompanyIdEventsTimelineGetRequest {
    companyId: number;
    locationId?: number;
    sensorId?: number;
    tocId?: number;
    tzOffset?: number;
    startTime?: string;
    endTime?: string;
}

/**
 * EventApi - interface
 * 
 * @export
 * @interface EventApiInterface
 */
export interface EventApiInterface {
    /**
     * # 
     * @summary # Актуальное изображение по событию
     * @param {number} companyId Идентификатор компании
     * @param {string} eventCode Код события
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdEventsEventCodeImageGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsEventCodeImageGetRequest): Promise<runtime.ApiResponse<EventImageGetResponse200>>;

    /**
     * # 
     * # Актуальное изображение по событию
     */
    apiVaCompaniesCompanyIdEventsEventCodeImageGet(requestParameters: ApiVaCompaniesCompanyIdEventsEventCodeImageGetRequest): Promise<EventImageGetResponse200>;

    /**
     * # 
     * @summary # События за указанный период
     * @param {number} companyId Идентификатор компании
     * @param {number} [locationIds] Список идентификаторов площадки через запятую
     * @param {number} [sensorIds] Список идентификаторов датчиков через запятую
     * @param {number} [tocIds] Список идентификаторов категорий отслеживаемых объектов через запятую
     * @param {number} [tzOffset] Смещение часового пояса в часах в диапазоне от [-12, +12]. По умолчанию 0.
     * @param {string} [startTime] Локальное дата и время начала временного диапазона в формате YYYY-MM-DDTHH:MI:SS. По умолчанию, текущее дата и время минус день.
     * @param {string} [endTime] Локальное дата и время окончания временного диапазона в формате YYYY-MM-DDTHH:MI:SS. По умолчанию, текущее дата и время.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdEventsGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsGetRequest): Promise<runtime.ApiResponse<EventsGetResponse200>>;

    /**
     * # 
     * # События за указанный период
     */
    apiVaCompaniesCompanyIdEventsGet(requestParameters: ApiVaCompaniesCompanyIdEventsGetRequest): Promise<EventsGetResponse200>;

    /**
     * # 
     * @summary # Инциденты за указанный период
     * @param {number} companyId Идентификатор компании
     * @param {number} [tzOffset] Смещение часового пояса в часах в диапазоне от [-12, +12]. По умолчанию 0.
     * @param {string} [startTime] Локальное дата и время начала временного диапазона в формате YYYY-MM-DDTHH:MI:SS. По умолчанию, текущее дата и время минус день.
     * @param {string} [endTime] Локальное дата и время окончания временного диапазона в формате YYYY-MM-DDTHH:MI:SS. По умолчанию, текущее дата и время.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdEventsIncidentsGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsIncidentsGetRequest): Promise<runtime.ApiResponse<IncidentsGetResponse200>>;

    /**
     * # 
     * # Инциденты за указанный период
     */
    apiVaCompaniesCompanyIdEventsIncidentsGet(requestParameters: ApiVaCompaniesCompanyIdEventsIncidentsGetRequest): Promise<IncidentsGetResponse200>;

    /**
     * # 
     * @summary # Учет въезжающих/выезжающих транспортныех средств. Статистика
     * @param {number} companyId Идентификатор компании
     * @param {number} [tzOffset] Смещение часового пояса в часах в диапазоне от [-12, +12]. По умолчанию 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdEventsInoutStatsGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsInoutStatsGetRequest): Promise<runtime.ApiResponse<InoutEventsStatsGetResponse200>>;

    /**
     * # 
     * # Учет въезжающих/выезжающих транспортныех средств. Статистика
     */
    apiVaCompaniesCompanyIdEventsInoutStatsGet(requestParameters: ApiVaCompaniesCompanyIdEventsInoutStatsGetRequest): Promise<InoutEventsStatsGetResponse200>;

    /**
     * # 
     * @summary # Учет въезжающих/выезжающих транспортных средств. Последние события
     * @param {number} companyId Идентификатор компании
     * @param {number} [tzOffset] Смещение часового пояса в часах в диапазоне от [-12, +12]. По умолчанию 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdEventsLatestGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsLatestGetRequest): Promise<runtime.ApiResponse<LatestEventsGetResponse200>>;

    /**
     * # 
     * # Учет въезжающих/выезжающих транспортных средств. Последние события
     */
    apiVaCompaniesCompanyIdEventsLatestGet(requestParameters: ApiVaCompaniesCompanyIdEventsLatestGetRequest): Promise<LatestEventsGetResponse200>;

    /**
     * # 
     * @summary # Хронология событий за сутки в разрезе площадки, датчика и категории транспортного средства
     * @param {number} companyId Идентификатор компании
     * @param {number} [locationId] Идентификатор площадки
     * @param {number} [sensorId] Идентификатор датчика
     * @param {number} [tocId] Идентификатор категории отслеживаемого объекта
     * @param {number} [tzOffset] Смещение часового пояса в часах в диапазоне от [-12, +12]. По умолчанию 0.
     * @param {string} [startTime] Локальное дата и время начала хронологии событий в формате YYYY-MM-DDTHH:MI:SS. По умолчанию, текущее дата и время минус день.
     * @param {string} [endTime] Локальное дата и время окончания хронологии событий в формате YYYY-MM-DDTHH:MI:SS. По умолчанию, текущее дата и время.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdEventsTimelineGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsTimelineGetRequest): Promise<runtime.ApiResponse<TimelineEventsGetResponse200>>;

    /**
     * # 
     * # Хронология событий за сутки в разрезе площадки, датчика и категории транспортного средства
     */
    apiVaCompaniesCompanyIdEventsTimelineGet(requestParameters: ApiVaCompaniesCompanyIdEventsTimelineGetRequest): Promise<TimelineEventsGetResponse200>;

}

/**
 * 
 */
export class EventApi extends runtime.BaseAPI implements EventApiInterface {

    /**
     * # 
     * # Актуальное изображение по событию
     */
    async apiVaCompaniesCompanyIdEventsEventCodeImageGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsEventCodeImageGetRequest): Promise<runtime.ApiResponse<EventImageGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdEventsEventCodeImageGet.');
        }

        if (requestParameters.eventCode === null || requestParameters.eventCode === undefined) {
            throw new runtime.RequiredError('eventCode','Required parameter requestParameters.eventCode was null or undefined when calling apiVaCompaniesCompanyIdEventsEventCodeImageGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/events/{event_code}/image`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))).replace(`{${"event_code"}}`, encodeURIComponent(String(requestParameters.eventCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EventImageGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Актуальное изображение по событию
     */
    async apiVaCompaniesCompanyIdEventsEventCodeImageGet(requestParameters: ApiVaCompaniesCompanyIdEventsEventCodeImageGetRequest): Promise<EventImageGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdEventsEventCodeImageGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # События за указанный период
     */
    async apiVaCompaniesCompanyIdEventsGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsGetRequest): Promise<runtime.ApiResponse<EventsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdEventsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locationIds !== undefined) {
            queryParameters['location_ids'] = requestParameters.locationIds;
        }

        if (requestParameters.sensorIds !== undefined) {
            queryParameters['sensor_ids'] = requestParameters.sensorIds;
        }

        if (requestParameters.tocIds !== undefined) {
            queryParameters['toc_ids'] = requestParameters.tocIds;
        }

        if (requestParameters.tzOffset !== undefined) {
            queryParameters['tz_offset'] = requestParameters.tzOffset;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['end_time'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/events`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # События за указанный период
     */
    async apiVaCompaniesCompanyIdEventsGet(requestParameters: ApiVaCompaniesCompanyIdEventsGetRequest): Promise<EventsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdEventsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Инциденты за указанный период
     */
    async apiVaCompaniesCompanyIdEventsIncidentsGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsIncidentsGetRequest): Promise<runtime.ApiResponse<IncidentsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdEventsIncidentsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tzOffset !== undefined) {
            queryParameters['tz_offset'] = requestParameters.tzOffset;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['end_time'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/events/incidents`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IncidentsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Инциденты за указанный период
     */
    async apiVaCompaniesCompanyIdEventsIncidentsGet(requestParameters: ApiVaCompaniesCompanyIdEventsIncidentsGetRequest): Promise<IncidentsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdEventsIncidentsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Учет въезжающих/выезжающих транспортныех средств. Статистика
     */
    async apiVaCompaniesCompanyIdEventsInoutStatsGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsInoutStatsGetRequest): Promise<runtime.ApiResponse<InoutEventsStatsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdEventsInoutStatsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tzOffset !== undefined) {
            queryParameters['tz_offset'] = requestParameters.tzOffset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/events/inout/stats`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InoutEventsStatsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Учет въезжающих/выезжающих транспортныех средств. Статистика
     */
    async apiVaCompaniesCompanyIdEventsInoutStatsGet(requestParameters: ApiVaCompaniesCompanyIdEventsInoutStatsGetRequest): Promise<InoutEventsStatsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdEventsInoutStatsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Учет въезжающих/выезжающих транспортных средств. Последние события
     */
    async apiVaCompaniesCompanyIdEventsLatestGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsLatestGetRequest): Promise<runtime.ApiResponse<LatestEventsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdEventsLatestGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tzOffset !== undefined) {
            queryParameters['tz_offset'] = requestParameters.tzOffset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/events/latest`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LatestEventsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Учет въезжающих/выезжающих транспортных средств. Последние события
     */
    async apiVaCompaniesCompanyIdEventsLatestGet(requestParameters: ApiVaCompaniesCompanyIdEventsLatestGetRequest): Promise<LatestEventsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdEventsLatestGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Хронология событий за сутки в разрезе площадки, датчика и категории транспортного средства
     */
    async apiVaCompaniesCompanyIdEventsTimelineGetRaw(requestParameters: ApiVaCompaniesCompanyIdEventsTimelineGetRequest): Promise<runtime.ApiResponse<TimelineEventsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdEventsTimelineGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locationId !== undefined) {
            queryParameters['location_id'] = requestParameters.locationId;
        }

        if (requestParameters.sensorId !== undefined) {
            queryParameters['sensor_id'] = requestParameters.sensorId;
        }

        if (requestParameters.tocId !== undefined) {
            queryParameters['toc_id'] = requestParameters.tocId;
        }

        if (requestParameters.tzOffset !== undefined) {
            queryParameters['tz_offset'] = requestParameters.tzOffset;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['start_time'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['end_time'] = requestParameters.endTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/events/timeline`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimelineEventsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Хронология событий за сутки в разрезе площадки, датчика и категории транспортного средства
     */
    async apiVaCompaniesCompanyIdEventsTimelineGet(requestParameters: ApiVaCompaniesCompanyIdEventsTimelineGetRequest): Promise<TimelineEventsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdEventsTimelineGetRaw(requestParameters);
        return await response.value();
    }

}
