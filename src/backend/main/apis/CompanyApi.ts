/* tslint:disable */
/* eslint-disable */
/**
 * va
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.14.dev96
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CompanyLocationsGetResponse200,
    CompanyLocationsGetResponse200FromJSON,
    CompanyLocationsGetResponse200ToJSON,
    CompanyModelsRequest,
    CompanyModelsRequestFromJSON,
    CompanyModelsRequestToJSON,
    CompanySensorsGetResponse200,
    CompanySensorsGetResponse200FromJSON,
    CompanySensorsGetResponse200ToJSON,
    CompanyTocsGetResponse200,
    CompanyTocsGetResponse200FromJSON,
    CompanyTocsGetResponse200ToJSON,
    LocationsGetResponse200,
    LocationsGetResponse200FromJSON,
    LocationsGetResponse200ToJSON,
    ModelsGetResponse200,
    ModelsGetResponse200FromJSON,
    ModelsGetResponse200ToJSON,
    SensorsGetResponse200,
    SensorsGetResponse200FromJSON,
    SensorsGetResponse200ToJSON,
    TocsGetResponse200,
    TocsGetResponse200FromJSON,
    TocsGetResponse200ToJSON,
} from '../models';

export interface ApiVaCompaniesCompanyIdLocationsGetRequest {
    companyId: number;
}

export interface ApiVaCompaniesCompanyIdModelsGetRequest {
    companyId: number;
}

export interface ApiVaCompaniesCompanyIdModelsPostRequest {
    companyId: number;
    request: CompanyModelsRequest;
}

export interface ApiVaCompaniesCompanyIdSensorsGetRequest {
    companyId: number;
}

export interface ApiVaCompaniesCompanyIdTocsGetRequest {
    companyId: number;
}

/**
 * CompanyApi - interface
 * 
 * @export
 * @interface CompanyApiInterface
 */
export interface CompanyApiInterface {
    /**
     * # 
     * @summary # Сведения о площадках компании
     * @param {number} companyId Идентификатор компании
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaCompaniesCompanyIdLocationsGetRaw(requestParameters: ApiVaCompaniesCompanyIdLocationsGetRequest): Promise<runtime.ApiResponse<CompanyLocationsGetResponse200>>;

    /**
     * # 
     * # Сведения о площадках компании
     */
    apiVaCompaniesCompanyIdLocationsGet(requestParameters: ApiVaCompaniesCompanyIdLocationsGetRequest): Promise<CompanyLocationsGetResponse200>;

    /**
     * # 
     * @summary # Сведения о моделях по компании
     * @param {number} companyId Идентификатор компании
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaCompaniesCompanyIdModelsGetRaw(requestParameters: ApiVaCompaniesCompanyIdModelsGetRequest): Promise<runtime.ApiResponse<ModelsGetResponse200>>;

    /**
     * # 
     * # Сведения о моделях по компании
     */
    apiVaCompaniesCompanyIdModelsGet(requestParameters: ApiVaCompaniesCompanyIdModelsGetRequest): Promise<ModelsGetResponse200>;

    /**
     * # 
     * @summary # Сохранение модели и категорий отслеживаемых объектов
     * @param {number} companyId Идентификатор компании
     * @param {CompanyModelsRequest} request Сведения о модели и категориях отслеживаемых объектов
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaCompaniesCompanyIdModelsPostRaw(requestParameters: ApiVaCompaniesCompanyIdModelsPostRequest): Promise<runtime.ApiResponse<object>>;

    /**
     * # 
     * # Сохранение модели и категорий отслеживаемых объектов
     */
    apiVaCompaniesCompanyIdModelsPost(requestParameters: ApiVaCompaniesCompanyIdModelsPostRequest): Promise<object>;

    /**
     * # 
     * @summary # Сведения о датчиках компании
     * @param {number} companyId Идентификатор компании
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaCompaniesCompanyIdSensorsGetRaw(requestParameters: ApiVaCompaniesCompanyIdSensorsGetRequest): Promise<runtime.ApiResponse<CompanySensorsGetResponse200>>;

    /**
     * # 
     * # Сведения о датчиках компании
     */
    apiVaCompaniesCompanyIdSensorsGet(requestParameters: ApiVaCompaniesCompanyIdSensorsGetRequest): Promise<CompanySensorsGetResponse200>;

    /**
     * # 
     * @summary # Сведения о категориях отслеживаемых объектов по компании
     * @param {number} companyId Идентификатор компании
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaCompaniesCompanyIdTocsGetRaw(requestParameters: ApiVaCompaniesCompanyIdTocsGetRequest): Promise<runtime.ApiResponse<CompanyTocsGetResponse200>>;

    /**
     * # 
     * # Сведения о категориях отслеживаемых объектов по компании
     */
    apiVaCompaniesCompanyIdTocsGet(requestParameters: ApiVaCompaniesCompanyIdTocsGetRequest): Promise<CompanyTocsGetResponse200>;

    /**
     * # 
     * @summary # Сведения о всех площадках по всем компаниям
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaLocationsGetRaw(): Promise<runtime.ApiResponse<LocationsGetResponse200>>;

    /**
     * # 
     * # Сведения о всех площадках по всем компаниям
     */
    apiVaLocationsGet(): Promise<LocationsGetResponse200>;

    /**
     * # 
     * @summary # Сведения о всех моделях расчета по всем компаниям
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaModelsGetRaw(): Promise<runtime.ApiResponse<ModelsGetResponse200>>;

    /**
     * # 
     * # Сведения о всех моделях расчета по всем компаниям
     */
    apiVaModelsGet(): Promise<ModelsGetResponse200>;

    /**
     * # 
     * @summary # Сведения о всех датчиках по всем компаниям
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaSensorsGetRaw(): Promise<runtime.ApiResponse<SensorsGetResponse200>>;

    /**
     * # 
     * # Сведения о всех датчиках по всем компаниям
     */
    apiVaSensorsGet(): Promise<SensorsGetResponse200>;

    /**
     * # 
     * @summary # Сведения о всех категориях отслеживаемых объектов по всем компаниям
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiVaTocsGetRaw(): Promise<runtime.ApiResponse<TocsGetResponse200>>;

    /**
     * # 
     * # Сведения о всех категориях отслеживаемых объектов по всем компаниям
     */
    apiVaTocsGet(): Promise<TocsGetResponse200>;

}

/**
 * 
 */
export class CompanyApi extends runtime.BaseAPI implements CompanyApiInterface {

    /**
     * # 
     * # Сведения о площадках компании
     */
    async apiVaCompaniesCompanyIdLocationsGetRaw(requestParameters: ApiVaCompaniesCompanyIdLocationsGetRequest): Promise<runtime.ApiResponse<CompanyLocationsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdLocationsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/locations`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyLocationsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о площадках компании
     */
    async apiVaCompaniesCompanyIdLocationsGet(requestParameters: ApiVaCompaniesCompanyIdLocationsGetRequest): Promise<CompanyLocationsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdLocationsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Сведения о моделях по компании
     */
    async apiVaCompaniesCompanyIdModelsGetRaw(requestParameters: ApiVaCompaniesCompanyIdModelsGetRequest): Promise<runtime.ApiResponse<ModelsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdModelsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/models`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о моделях по компании
     */
    async apiVaCompaniesCompanyIdModelsGet(requestParameters: ApiVaCompaniesCompanyIdModelsGetRequest): Promise<ModelsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdModelsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Сохранение модели и категорий отслеживаемых объектов
     */
    async apiVaCompaniesCompanyIdModelsPostRaw(requestParameters: ApiVaCompaniesCompanyIdModelsPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdModelsPost.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling apiVaCompaniesCompanyIdModelsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/va/companies/{company_id}/models`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyModelsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * # 
     * # Сохранение модели и категорий отслеживаемых объектов
     */
    async apiVaCompaniesCompanyIdModelsPost(requestParameters: ApiVaCompaniesCompanyIdModelsPostRequest): Promise<object> {
        const response = await this.apiVaCompaniesCompanyIdModelsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Сведения о датчиках компании
     */
    async apiVaCompaniesCompanyIdSensorsGetRaw(requestParameters: ApiVaCompaniesCompanyIdSensorsGetRequest): Promise<runtime.ApiResponse<CompanySensorsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdSensorsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/sensors`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanySensorsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о датчиках компании
     */
    async apiVaCompaniesCompanyIdSensorsGet(requestParameters: ApiVaCompaniesCompanyIdSensorsGetRequest): Promise<CompanySensorsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdSensorsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Сведения о категориях отслеживаемых объектов по компании
     */
    async apiVaCompaniesCompanyIdTocsGetRaw(requestParameters: ApiVaCompaniesCompanyIdTocsGetRequest): Promise<runtime.ApiResponse<CompanyTocsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdTocsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/tocs`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyTocsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о категориях отслеживаемых объектов по компании
     */
    async apiVaCompaniesCompanyIdTocsGet(requestParameters: ApiVaCompaniesCompanyIdTocsGetRequest): Promise<CompanyTocsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdTocsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Сведения о всех площадках по всем компаниям
     */
    async apiVaLocationsGetRaw(): Promise<runtime.ApiResponse<LocationsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о всех площадках по всем компаниям
     */
    async apiVaLocationsGet(): Promise<LocationsGetResponse200> {
        const response = await this.apiVaLocationsGetRaw();
        return await response.value();
    }

    /**
     * # 
     * # Сведения о всех моделях расчета по всем компаниям
     */
    async apiVaModelsGetRaw(): Promise<runtime.ApiResponse<ModelsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о всех моделях расчета по всем компаниям
     */
    async apiVaModelsGet(): Promise<ModelsGetResponse200> {
        const response = await this.apiVaModelsGetRaw();
        return await response.value();
    }

    /**
     * # 
     * # Сведения о всех датчиках по всем компаниям
     */
    async apiVaSensorsGetRaw(): Promise<runtime.ApiResponse<SensorsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/sensors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о всех датчиках по всем компаниям
     */
    async apiVaSensorsGet(): Promise<SensorsGetResponse200> {
        const response = await this.apiVaSensorsGetRaw();
        return await response.value();
    }

    /**
     * # 
     * # Сведения о всех категориях отслеживаемых объектов по всем компаниям
     */
    async apiVaTocsGetRaw(): Promise<runtime.ApiResponse<TocsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/tocs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TocsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Сведения о всех категориях отслеживаемых объектов по всем компаниям
     */
    async apiVaTocsGet(): Promise<TocsGetResponse200> {
        const response = await this.apiVaTocsGetRaw();
        return await response.value();
    }

}
