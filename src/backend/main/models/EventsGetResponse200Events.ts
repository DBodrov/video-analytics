/* tslint:disable */
/* eslint-disable */
/**
 * va
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.19.dev162
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IncidentGetResponse200IncidentImage,
    IncidentGetResponse200IncidentImageFromJSON,
    IncidentGetResponse200IncidentImageFromJSONTyped,
    IncidentGetResponse200IncidentImageToJSON,
    IncidentGetResponse200IncidentStatus,
    IncidentGetResponse200IncidentStatusFromJSON,
    IncidentGetResponse200IncidentStatusFromJSONTyped,
    IncidentGetResponse200IncidentStatusToJSON,
    IncidentGetResponse200IncidentTrackedObject,
    IncidentGetResponse200IncidentTrackedObjectFromJSON,
    IncidentGetResponse200IncidentTrackedObjectFromJSONTyped,
    IncidentGetResponse200IncidentTrackedObjectToJSON,
    TimelineGetOccurrence200Thumbnail,
    TimelineGetOccurrence200ThumbnailFromJSON,
    TimelineGetOccurrence200ThumbnailFromJSONTyped,
    TimelineGetOccurrence200ThumbnailToJSON,
} from './';

/**
 * Сведения о событии
 * @export
 * @interface EventsGetResponse200Events
 */
export interface EventsGetResponse200Events {
    /**
     * Идентификатор проверки
     * @type {number}
     * @memberof EventsGetResponse200Events
     */
    checkId: number;
    /**
     * Код события
     * @type {string}
     * @memberof EventsGetResponse200Events
     */
    eventCode: string;
    /**
     * Идентификатор события
     * @type {number}
     * @memberof EventsGetResponse200Events
     */
    eventId: number;
    /**
     * Дата и время совершения события в формате "YYYY-MM-DD HH:MI:SS"
     * @type {string}
     * @memberof EventsGetResponse200Events
     */
    eventTimestamp: string;
    /**
     * Идентификатор площадки
     * @type {number}
     * @memberof EventsGetResponse200Events
     */
    locationId: number;
    /**
     * Идентификатор датчика
     * @type {number}
     * @memberof EventsGetResponse200Events
     */
    sensorId: number;
    /**
     * 
     * @type {IncidentGetResponse200IncidentStatus}
     * @memberof EventsGetResponse200Events
     */
    status?: IncidentGetResponse200IncidentStatus;
    /**
     * Идентификатор категории обнаруженного объекта
     * @type {number}
     * @memberof EventsGetResponse200Events
     */
    tocId: number;
    /**
     * 
     * @type {IncidentGetResponse200IncidentTrackedObject}
     * @memberof EventsGetResponse200Events
     */
    trackedObject: IncidentGetResponse200IncidentTrackedObject;
    /**
     * 
     * @type {IncidentGetResponse200IncidentImage}
     * @memberof EventsGetResponse200Events
     */
    image?: IncidentGetResponse200IncidentImage;
    /**
     * 
     * @type {TimelineGetOccurrence200Thumbnail}
     * @memberof EventsGetResponse200Events
     */
    thumbnail?: TimelineGetOccurrence200Thumbnail;
}

export function EventsGetResponse200EventsFromJSON(json: any): EventsGetResponse200Events {
    return EventsGetResponse200EventsFromJSONTyped(json, false);
}

export function EventsGetResponse200EventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventsGetResponse200Events {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'checkId': json['check_id'],
        'eventCode': json['event_code'],
        'eventId': json['event_id'],
        'eventTimestamp': json['event_timestamp'],
        'locationId': json['location_id'],
        'sensorId': json['sensor_id'],
        'status': !exists(json, 'status') ? undefined : IncidentGetResponse200IncidentStatusFromJSON(json['status']),
        'tocId': json['toc_id'],
        'trackedObject': IncidentGetResponse200IncidentTrackedObjectFromJSON(json['tracked_object']),
        'image': !exists(json, 'image') ? undefined : IncidentGetResponse200IncidentImageFromJSON(json['image']),
        'thumbnail': !exists(json, 'thumbnail') ? undefined : TimelineGetOccurrence200ThumbnailFromJSON(json['thumbnail']),
    };
}

export function EventsGetResponse200EventsToJSON(value?: EventsGetResponse200Events | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'check_id': value.checkId,
        'event_code': value.eventCode,
        'event_id': value.eventId,
        'event_timestamp': value.eventTimestamp,
        'location_id': value.locationId,
        'sensor_id': value.sensorId,
        'status': IncidentGetResponse200IncidentStatusToJSON(value.status),
        'toc_id': value.tocId,
        'tracked_object': IncidentGetResponse200IncidentTrackedObjectToJSON(value.trackedObject),
        'image': IncidentGetResponse200IncidentImageToJSON(value.image),
        'thumbnail': TimelineGetOccurrence200ThumbnailToJSON(value.thumbnail),
    };
}


