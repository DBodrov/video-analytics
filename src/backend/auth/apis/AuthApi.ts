/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.9.dev57
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckTokenError,
    CheckTokenErrorFromJSON,
    CheckTokenErrorToJSON,
    CheckTokenResponse200,
    CheckTokenResponse200FromJSON,
    CheckTokenResponse200ToJSON,
    LoginPostError,
    LoginPostErrorFromJSON,
    LoginPostErrorToJSON,
    LoginPostRequest,
    LoginPostRequestFromJSON,
    LoginPostRequestToJSON,
    LoginPostResponse201,
    LoginPostResponse201FromJSON,
    LoginPostResponse201ToJSON,
    TokenPostError,
    TokenPostErrorFromJSON,
    TokenPostErrorToJSON,
    TokenPostResponse201,
    TokenPostResponse201FromJSON,
    TokenPostResponse201ToJSON,
    UsersPostError,
    UsersPostErrorFromJSON,
    UsersPostErrorToJSON,
    UsersPostRequest,
    UsersPostRequestFromJSON,
    UsersPostRequestToJSON,
} from '../models';

export interface ApiAuthCheckTokenGetRequest {
    authorization: string;
}

export interface ApiAuthLoginPostRequest {
    request: LoginPostRequest;
}

export interface ApiAuthTokenPostRequest {
    authorization: string;
}

export interface ApiAuthUsersPostRequest {
    authorization: string;
    request: UsersPostRequest;
}

/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * #
     * @summary # Проверка токена доступа
     * @param {string} authorization Действующий токен доступа в формате \&quot;Bearer {token}\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthCheckTokenGetRaw(requestParameters: ApiAuthCheckTokenGetRequest): Promise<runtime.ApiResponse<CheckTokenResponse200>>;

    /**
     * #
     * # Проверка токена доступа
     */
    apiAuthCheckTokenGet(requestParameters: ApiAuthCheckTokenGetRequest): Promise<CheckTokenResponse200>;

    /**
     * #
     * @summary # Идентификация пользователя
     * @param {LoginPostRequest} request Авторизационные данные пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostRequest): Promise<runtime.ApiResponse<LoginPostResponse201>>;

    /**
     * #
     * # Идентификация пользователя
     */
    apiAuthLoginPost(requestParameters: ApiAuthLoginPostRequest): Promise<LoginPostResponse201>;

    /**
     * #
     * @summary # Обновление токена доступа
     * @param {string} authorization Действующий токен доступа (refresh) в формате \&quot;Bearer {token}\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthTokenPostRaw(requestParameters: ApiAuthTokenPostRequest): Promise<runtime.ApiResponse<TokenPostResponse201>>;

    /**
     * #
     * # Обновление токена доступа
     */
    apiAuthTokenPost(requestParameters: ApiAuthTokenPostRequest): Promise<TokenPostResponse201>;

    /**
     * #
     * @summary # Регистрация пользователя
     * @param {string} authorization Действующий токен доступа в формате \&quot;Bearer {token}\&quot;
     * @param {UsersPostRequest} request Сведения о пользователе
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthUsersPostRaw(requestParameters: ApiAuthUsersPostRequest): Promise<runtime.ApiResponse<object>>;

    /**
     * #
     * # Регистрация пользователя
     */
    apiAuthUsersPost(requestParameters: ApiAuthUsersPostRequest): Promise<object>;

}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * #
     * # Проверка токена доступа
     */
    async apiAuthCheckTokenGetRaw(requestParameters: ApiAuthCheckTokenGetRequest): Promise<runtime.ApiResponse<CheckTokenResponse200>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiAuthCheckTokenGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/auth/check-token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckTokenResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Проверка токена доступа
     */
    async apiAuthCheckTokenGet(requestParameters: ApiAuthCheckTokenGetRequest): Promise<CheckTokenResponse200> {
        const response = await this.apiAuthCheckTokenGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * #
     * # Идентификация пользователя
     */
    async apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostRequest): Promise<runtime.ApiResponse<LoginPostResponse201>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling apiAuthLoginPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginPostRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginPostResponse201FromJSON(jsonValue));
    }

    /**
     * #
     * # Идентификация пользователя
     */
    async apiAuthLoginPost(requestParameters: ApiAuthLoginPostRequest): Promise<LoginPostResponse201> {
        const response = await this.apiAuthLoginPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * #
     * # Обновление токена доступа
     */
    async apiAuthTokenPostRaw(requestParameters: ApiAuthTokenPostRequest): Promise<runtime.ApiResponse<TokenPostResponse201>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiAuthTokenPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenPostResponse201FromJSON(jsonValue));
    }

    /**
     * #
     * # Обновление токена доступа
     */
    async apiAuthTokenPost(requestParameters: ApiAuthTokenPostRequest): Promise<TokenPostResponse201> {
        const response = await this.apiAuthTokenPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * #
     * # Регистрация пользователя
     */
    async apiAuthUsersPostRaw(requestParameters: ApiAuthUsersPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling apiAuthUsersPost.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling apiAuthUsersPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/auth/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersPostRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * #
     * # Регистрация пользователя
     */
    async apiAuthUsersPost(requestParameters: ApiAuthUsersPostRequest): Promise<object> {
        const response = await this.apiAuthUsersPostRaw(requestParameters);
        return await response.value();
    }

}
