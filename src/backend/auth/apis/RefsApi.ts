/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.9.dev57
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckCategoriesGetResponse200,
    CheckCategoriesGetResponse200FromJSON,
    CheckCategoriesGetResponse200ToJSON,
    ChecksGetResponse200,
    ChecksGetResponse200FromJSON,
    ChecksGetResponse200ToJSON,
    DetectorsGetResponse200,
    DetectorsGetResponse200FromJSON,
    DetectorsGetResponse200ToJSON,
    EventStatusesGetResponse200,
    EventStatusesGetResponse200FromJSON,
    EventStatusesGetResponse200ToJSON,
    ModelsGetResponse200,
    ModelsGetResponse200FromJSON,
    ModelsGetResponse200ToJSON,
    ModelsRequest,
    ModelsRequestFromJSON,
    ModelsRequestToJSON,
    TocsGetResponse200,
    TocsGetResponse200FromJSON,
    TocsGetResponse200ToJSON,
    TrackersGetResponse200,
    TrackersGetResponse200FromJSON,
    TrackersGetResponse200ToJSON,
} from '../models';

export interface ApiAuthRefsModelsPostRequest {
    request: ModelsRequest;
}

/**
 * RefsApi - interface
 *
 * @export
 * @interface RefsApiInterface
 */
export interface RefsApiInterface {
    /**
     * #
     * @summary # Справочные сведения о категориях проверок (шаблонах)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsCheckCategoriesGetRaw(): Promise<runtime.ApiResponse<CheckCategoriesGetResponse200>>;

    /**
     * #
     * # Справочные сведения о категориях проверок (шаблонах)
     */
    apiAuthRefsCheckCategoriesGet(): Promise<CheckCategoriesGetResponse200>;

    /**
     * #
     * @summary # Справочные сведения о проверках (бизнес-правилах)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsChecksGetRaw(): Promise<runtime.ApiResponse<ChecksGetResponse200>>;

    /**
     * #
     * # Справочные сведения о проверках (бизнес-правилах)
     */
    apiAuthRefsChecksGet(): Promise<ChecksGetResponse200>;

    /**
     * #
     * @summary # Справочные сведения о детекторах
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsDetectorsGetRaw(): Promise<runtime.ApiResponse<DetectorsGetResponse200>>;

    /**
     * #
     * # Справочные сведения о детекторах
     */
    apiAuthRefsDetectorsGet(): Promise<DetectorsGetResponse200>;

    /**
     * #
     * @summary # Справочные сведения о статусах событий
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsEventStatusesGetRaw(): Promise<runtime.ApiResponse<EventStatusesGetResponse200>>;

    /**
     * #
     * # Справочные сведения о статусах событий
     */
    apiAuthRefsEventStatusesGet(): Promise<EventStatusesGetResponse200>;

    /**
     * #
     * @summary # Сведения о моделях расчета
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsModelsGetRaw(): Promise<runtime.ApiResponse<ModelsGetResponse200>>;

    /**
     * #
     * # Сведения о моделях расчета
     */
    apiAuthRefsModelsGet(): Promise<ModelsGetResponse200>;

    /**
     * #
     * @summary # Сохранение модели и категорий отслеживаемых объектов
     * @param {ModelsRequest} request Сведения о модели и категориях отслеживаемых объектов
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsModelsPostRaw(requestParameters: ApiAuthRefsModelsPostRequest): Promise<runtime.ApiResponse<object>>;

    /**
     * #
     * # Сохранение модели и категорий отслеживаемых объектов
     */
    apiAuthRefsModelsPost(requestParameters: ApiAuthRefsModelsPostRequest): Promise<object>;

    /**
     * #
     * @summary # Сведения о категориях отслеживаемых объектов
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsTocsGetRaw(): Promise<runtime.ApiResponse<TocsGetResponse200>>;

    /**
     * #
     * # Сведения о категориях отслеживаемых объектов
     */
    apiAuthRefsTocsGet(): Promise<TocsGetResponse200>;

    /**
     * #
     * @summary # Справочные сведения о трекерах
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefsApiInterface
     */
    apiAuthRefsTrackersGetRaw(): Promise<runtime.ApiResponse<TrackersGetResponse200>>;

    /**
     * #
     * # Справочные сведения о трекерах
     */
    apiAuthRefsTrackersGet(): Promise<TrackersGetResponse200>;

}

/**
 *
 */
export class RefsApi extends runtime.BaseAPI implements RefsApiInterface {

    /**
     * #
     * # Справочные сведения о категориях проверок (шаблонах)
     */
    async apiAuthRefsCheckCategoriesGetRaw(): Promise<runtime.ApiResponse<CheckCategoriesGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/check_categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckCategoriesGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Справочные сведения о категориях проверок (шаблонах)
     */
    async apiAuthRefsCheckCategoriesGet(): Promise<CheckCategoriesGetResponse200> {
        const response = await this.apiAuthRefsCheckCategoriesGetRaw();
        return await response.value();
    }

    /**
     * #
     * # Справочные сведения о проверках (бизнес-правилах)
     */
    async apiAuthRefsChecksGetRaw(): Promise<runtime.ApiResponse<ChecksGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/checks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChecksGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Справочные сведения о проверках (бизнес-правилах)
     */
    async apiAuthRefsChecksGet(): Promise<ChecksGetResponse200> {
        const response = await this.apiAuthRefsChecksGetRaw();
        return await response.value();
    }

    /**
     * #
     * # Справочные сведения о детекторах
     */
    async apiAuthRefsDetectorsGetRaw(): Promise<runtime.ApiResponse<DetectorsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/detectors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectorsGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Справочные сведения о детекторах
     */
    async apiAuthRefsDetectorsGet(): Promise<DetectorsGetResponse200> {
        const response = await this.apiAuthRefsDetectorsGetRaw();
        return await response.value();
    }

    /**
     * #
     * # Справочные сведения о статусах событий
     */
    async apiAuthRefsEventStatusesGetRaw(): Promise<runtime.ApiResponse<EventStatusesGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/event_statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EventStatusesGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Справочные сведения о статусах событий
     */
    async apiAuthRefsEventStatusesGet(): Promise<EventStatusesGetResponse200> {
        const response = await this.apiAuthRefsEventStatusesGetRaw();
        return await response.value();
    }

    /**
     * #
     * # Сведения о моделях расчета
     */
    async apiAuthRefsModelsGetRaw(): Promise<runtime.ApiResponse<ModelsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelsGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Сведения о моделях расчета
     */
    async apiAuthRefsModelsGet(): Promise<ModelsGetResponse200> {
        const response = await this.apiAuthRefsModelsGetRaw();
        return await response.value();
    }

    /**
     * #
     * # Сохранение модели и категорий отслеживаемых объектов
     */
    async apiAuthRefsModelsPostRaw(requestParameters: ApiAuthRefsModelsPostRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling apiAuthRefsModelsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/refs/models`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * #
     * # Сохранение модели и категорий отслеживаемых объектов
     */
    async apiAuthRefsModelsPost(requestParameters: ApiAuthRefsModelsPostRequest): Promise<object> {
        const response = await this.apiAuthRefsModelsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * #
     * # Сведения о категориях отслеживаемых объектов
     */
    async apiAuthRefsTocsGetRaw(): Promise<runtime.ApiResponse<TocsGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/tocs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TocsGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Сведения о категориях отслеживаемых объектов
     */
    async apiAuthRefsTocsGet(): Promise<TocsGetResponse200> {
        const response = await this.apiAuthRefsTocsGetRaw();
        return await response.value();
    }

    /**
     * #
     * # Справочные сведения о трекерах
     */
    async apiAuthRefsTrackersGetRaw(): Promise<runtime.ApiResponse<TrackersGetResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/refs/trackers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackersGetResponse200FromJSON(jsonValue));
    }

    /**
     * #
     * # Справочные сведения о трекерах
     */
    async apiAuthRefsTrackersGet(): Promise<TrackersGetResponse200> {
        const response = await this.apiAuthRefsTrackersGetRaw();
        return await response.value();
    }

}
