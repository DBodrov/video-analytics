/* tslint:disable */
/* eslint-disable */
/**
 * va
 * powered by Flasgger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LocationEventsStatsGetResponse200,
    LocationEventsStatsGetResponse200FromJSON,
    LocationEventsStatsGetResponse200ToJSON,
    LocationLatestEventsGetResponse200,
    LocationLatestEventsGetResponse200FromJSON,
    LocationLatestEventsGetResponse200ToJSON,
} from '../models';

export interface ApiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRequest {
    companyId: number;
    locationId: number;
}

export interface ApiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRequest {
    companyId: number;
    locationId: number;
}

/**
 * EventApi - interface
 * 
 * @export
 * @interface EventApiInterface
 */
export interface EventApiInterface {
    /**
     * # 
     * @summary # Последние события на площадке по всем датчикам и категориям отслеживаемых объектов
     * @param {number} companyId Идентификатор компании
     * @param {number} locationId Идентификатор площадки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRaw(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRequest): Promise<runtime.ApiResponse<LocationLatestEventsGetResponse200>>;

    /**
     * # 
     * # Последние события на площадке по всем датчикам и категориям отслеживаемых объектов
     */
    apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGet(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRequest): Promise<LocationLatestEventsGetResponse200>;

    /**
     * # 
     * @summary # Статистика по событиям в разрезе датчиков и категорий отслеживаемых объектов
     * @param {number} companyId Идентификатор компании
     * @param {number} locationId Идентификатор площадки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRaw(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRequest): Promise<runtime.ApiResponse<LocationEventsStatsGetResponse200>>;

    /**
     * # 
     * # Статистика по событиям в разрезе датчиков и категорий отслеживаемых объектов
     */
    apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGet(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRequest): Promise<LocationEventsStatsGetResponse200>;

}

/**
 * 
 */
export class EventApi extends runtime.BaseAPI implements EventApiInterface {

    /**
     * # 
     * # Последние события на площадке по всем датчикам и категориям отслеживаемых объектов
     */
    async apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRaw(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRequest): Promise<runtime.ApiResponse<LocationLatestEventsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGet.');
        }

        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/locations/{location_id}/events/latest`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))).replace(`{${"location_id"}}`, encodeURIComponent(String(requestParameters.locationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationLatestEventsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Последние события на площадке по всем датчикам и категориям отслеживаемых объектов
     */
    async apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGet(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRequest): Promise<LocationLatestEventsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdLocationsLocationIdEventsLatestGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * # 
     * # Статистика по событиям в разрезе датчиков и категорий отслеживаемых объектов
     */
    async apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRaw(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRequest): Promise<runtime.ApiResponse<LocationEventsStatsGetResponse200>> {
        if (requestParameters.companyId === null || requestParameters.companyId === undefined) {
            throw new runtime.RequiredError('companyId','Required parameter requestParameters.companyId was null or undefined when calling apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGet.');
        }

        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/va/companies/{company_id}/locations/{location_id}/events/stats`.replace(`{${"company_id"}}`, encodeURIComponent(String(requestParameters.companyId))).replace(`{${"location_id"}}`, encodeURIComponent(String(requestParameters.locationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEventsStatsGetResponse200FromJSON(jsonValue));
    }

    /**
     * # 
     * # Статистика по событиям в разрезе датчиков и категорий отслеживаемых объектов
     */
    async apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGet(requestParameters: ApiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRequest): Promise<LocationEventsStatsGetResponse200> {
        const response = await this.apiVaCompaniesCompanyIdLocationsLocationIdEventsStatsGetRaw(requestParameters);
        return await response.value();
    }

}
